@@
1. WHAT IS A MERGE?

Merging in Git is the process of joining two histories (usually branches) together. Suppose you've created a new feature
branch from 'master', and done some work on it:

$ git checkout -b feature3 master
Switched to a new branch 'feature3'

$ echo "feature3 = 03" > test/feature3.txt
$ git add test/feature3.txt 
$ git commit -m 'finished feature 3'
[feature3 7e80ea8] finished feature 3
 1 file changed, 1 insertion(+)
 create mode 100644 test/feature3.txt

At the same time, you need to fix an urgent bug. So you create a hotfix branch from master, and do some work in there:

$ git checkout -b hotfix3 master
Switched to a new branch 'hotfix3'
$ 
$ vi test/feature1.txt 
$ git commit -am 'Fixed whitespace'
[hotfix3 5493e65] Fixed whitespace
 1 file changed, 1 insertion(+), 1 deletion(-)

At this point, the history will look something like this:

$ git log --oneline --all --graph -4
* 5493e65 Fixed whitespace                      <--- HOTFIX
| * 7e80ea8 finished feature 3                  <--- FEATURE BRANCH
|/  
* d7ddde0 some more files renamed               <--- MASTER
* 29ee4b1 renamed a few directories

Now, you want to bring the bug fix into 'master' so that you can tag it and release it.

$ git checkout master
Switched to branch 'master'

$ git merge hotfix3
Updating d7ddde0..5493e65
Fast-forward
 test/feature1.txt | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

Notice how Git mentions *fast-forward* during the merge. This means that all of the commits in 'hotfix3' were
directly upstream from 'master'. This allows Git to simply move the 'master' pointer (in .git/refs/heads) up the tree
to 'hotfix3'. What you end up with looks like this:

* 5493e65 Fixed whitespace                      <--- HOTFIX/MASTER (moved after fast-forward merge w/ HOTFIX)
| * 7e80ea8 finished feature 3                  <--- FEATURE BRANCH
|/ 
* d7ddde0 some more files renamed

Now, let's try and merge 'feature3' into 'master'.

$ git merge feature3
Merge made by the 'recursive' strategy.
 test/feature3.txt | 1 +
 1 file changed, 1 insertion(+)
 create mode 100644 test/feature3.txt

This time, Git wasn't able to perform a fast-forward. This is because 'feature3' isn't directly upstream from 'master'.
How did Git handle this merge? We see in the log that Git has actually created a new 'merge' commit, as well as bringing
the commit from 'feature3' branch.

$ git log --oneline --all --graph -4
*   4d45fcb Merge branch 'feature3'     <--- MASTER (at merge commit with two parents)
|\  
| * 7e80ea8 finished feature 3          <--- FEATURE BRANCH
* | 5493e65 Fixed whitespace            <--- HOTFIX 
|/  
* d7ddde0 some more files renamed

We see that this is a special kind of commit object -- it has *two parent commits*. This is referred to as a *merge commit*.
