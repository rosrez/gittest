BASICS OF BRANCHING
===================

git branch name
---------------

Creates a branch named name. To switch to the new branch, we use the checkout command:

git checkout name
-----------------

We can also combine the two commands into one

git checkout -b name
--------------------

To see which branch is currently active (checked out), use the 'branch' command without arguments:

git branch
----------

To see which branches are available at a remote (repo), use the 'branch -a' command:

git branch -a
-------------

The output may look like this:

$ git branch -a
* master
  remotes/origin/HEAD -> origin/master
  remotes/origin/master
  remotes/origin/newidea

SENDING BRANCHES OVER THE NETWORK: PUSHING AND PULLING
======================================================

In order to send the commits in a branch to a remote repository, we need to invoke a git-push command with a reference to the remote repository. 

git push
--------

We can do it like this:

git push https://rosrez@github.com/rosrez/gittest.git newidea

Git maintains a list of remote repositories, which we can view with this command

git remote -v
-------------

$ git remote -v
origin  https://rosrez@github.com/rosrez/gittest.git (fetch)
origin  https://rosrez@github.com/rosrez/gittest.git (push)

This list is essentially a list of bookmarks. On the left side in this example, we see the remote named 'origin', it's corresponding address is https://.... So whenever we reference origin in our network-related commands (push/pull, etc.) we just substitute the long address with the 'origin' bookmark. Origin is the default bookmark, but it's by no means special. We can add multiple repositories or even multiple bookmarks that refer to the same repo.

'origin' is the default remote that gets created when you clone a repository.

git push remote branch
----------------------

This updates branch 'branch' on a remote respository 'remote' with our local branch. It is necessary to perform this command on a newly created branch to send the branch to a remote repo. Unless git push remote branch is executed, the remote repo has no knowledge of the local branch.

Another way to look at git-push is to understand it as push where? what?



++++++++++++++++++++++++++++++++++++++++++++

EXAMPLE: BRANCH CREATION + SYNCHRONIZING WITH A REMOTE REPO
===========================================================

1. Create branch

$ git branch mediumfeature                         <----- CREATE THE 'mediumfeature' BATCH (just creates a placeholder)

On branch master
Your branch is up-to-date with 'origin/master'.
nothing to commit, working directory clean

$ git branch                                      <----- LIST BRANCHES: OUR BRANCH IS LISTED, BUT IS NOT CURRENT
* master
  mediumfeature

$ git checkout mediumfeature                       <------ ONLY NOW DO WE SWITCH TO THE NEW BRANCH
Switched to branch 'mediumfeature'
  
$ git status                                      <------ THE STATUS COMMAND NOW OUTPUTS OUR NEW BRANCH AS CURRENT
On branch mediumfeature
nothing to commit, working directory clean

$ git branch                                      <------ THE LIST OF BRANCHES NOW MARKS OUR NEW BRANCH AS CURRENT
  master
* mediumfeature

1a. An alternative workflow.

git checkout -b mediumfeature                      <------ COMBINES git branch AND git checkout.

2. Issue the push command to propagate the batch to a remote repo:

$ git push origin mediumfeature

3. Check that the remote now contains the branch:

git branch -a
  master
* mediumfeature
  newidea
  remotes/origin/HEAD -> origin/master
  remotes/origin/master
  remotes/origin/mediumfeature
  remotes/origin/newidea

4. Issue git-pull in a different repo (on the same machine or on a different one):

git pull
remote: Counting objects: 3, done.
remote: Total 3 (delta 1), reused 1 (delta 1), pack-reused 2
Unpacking objects: 100% (3/3), done.
From https://github.com/rosrez/gittest
 * [new branch]      mediumfeature -> origin/mediumfeature    <------ NOTIFIES ABOUT A NEW REMOTE BRANCH
Already up-to-date.

This says that a new branch appeared on a remote, but it doesn't actually download it or make it available for switching to. We can use git-status to verify:

git branch
* master
  newidea
  origin

This doesn't show the new 'mediumfeature' branch, so our local repo is still not associated with that branch.

NOTE. Remote repositories are immutable, we can't commit to it.

5. If we need to start modifying the remote repo, we have to check it out.

git checkout origin mediumfeature
---------------------------------

OR, we can issue a shorthand version of the command:

git checkout mediumfeature
--------------------------

The latter form assumes that there is NO LOCAL BRANCH CALLED 'mediumfeature'. 

After checking out the remote branch, we create a local shadow copy of it and automatically switch to it. With this command, we also ENABLE TRACKING changes to the remote repo -- so that subsequent git-pull requests know where to look for updates AND subsequent git-push commands also know where to push local changes. From now on, this branch can be synchronized with the remote by simple

git pull
AND
git push

commands, without arguments.

6. If we now make a change and commit it in the repository that checked out the branch created somewhere else, all you need to do is git-add, git-commit and git-push. git-push will work just fine because there is an association between the local and remote branch.

7. If we now want to pull the recent changes (6) in the repository where the branch was originally created, we run into a problem:

$ git pull
remote: Counting objects: 7, done.
remote: Compressing objects: 100% (7/7), done.
remote: Total 7 (delta 1), reused 0 (delta 0), pack-reused 0
Unpacking objects: 100% (7/7), done.
From https://github.com/rosrez/gittest
   4d1f4af..a72dfc0  master     -> origin/master
   c0ca15e..3b0699e  mediumfeature -> origin/mediumfeature
There is no tracking information for the current branch.
Please specify which branch you want to merge with.
See git-pull(1) for details

    git pull <remote> <branch>

If you wish to set tracking information for this branch you can do so with:

    git branch --set-upstream-to=origin/<branch> mediumfeature

* * * * *

The output suggests what we have to do: issue this command

git branch --set-upstream mediumfeature origin/mediumfeature (DEPRECATED!)

OR

git branch --set-upstream-to=origin/mediumfeature mediumfeature
Branch mediumfeature set up to track remote branch mediumfeature from origin.

This establishes a bi-directional linkage between the local and remote branch. git doesn't assume that this kind of linkage is created by default when you git-push to a remote branch. So the command we invoked initially:

git push origin mediumfeature

did create a remote branch, did update that branch with our local branch data, but it didn't establish a link in the opposite direction. So it is possible to do one-time commits to branches of our choice without actually having permanent local copies of those branches.

7. Now re-issue the git-pull command in the repo that created the branch. This time it succeeds:

$ git pull
Updating c0ca15e..3b0699e
Fast-forward
 mediumfeature.txt | 1 +
 1 file changed, 1 insertion(+)

NOTE that there is no network activity involved this time: git already cached the changes it had downloaded at the previous attempt to pull, so now it just merged the changes into my local branch.


++++++++++++++++++++++++++++++++++++++++++++

EXAMPLE: RENAMING AN EXISTING BRANCH

1. Suppose I created a branch with the name mediumfeature.txt by mistake:

2. I'd like to rename the branch. Here is how I do it (-m stands for 'move'):

$ git branch -m mediumfeature.txt mediumfeature

3. Check that the move worked as expected

$ git branch
  master
* mediumfeature
  newidea


++++++++++++++++++++++++++++++++++++++++++++

EXAMPLE: GIT'S INTERNAL MANAGEMENT OF BRANCHES
----------------------------------------------

1. LOCAL BRANCHES are stored this way.

$ cd .git/refs/heads

$ ls
master  mediumfeature  newidea

Here we have the 'heads' of all our branches, i.e we track the most recent commits to those branches here. If we look at the contents of mediumfeature, we'll see the hash of the most recent commit:

$ cat mediumfeature 
3b0699e0633ad1aac0b8cb48aa434a9ab9263a03

2. The actual storage area is this.

$ cd .git/objects

$ ls

00  0e  13  1c  25  31  3b  42  4d  57  5e  65  6e  91  94  97  9c  ab  b8  be  c1  c6  c8  e8  f5  fd    pack
0a  11  15  21  2f  38  41  44  51  5d  63  69  86  92  96  98  a7  b5  bd  c0  c2  c7  d9  ed  f9  info

These are directories with first digits of our hashes. We can pick a directory that matches our mediumfeature (3b) head and see what's inside the directory:

tree 3b
3b
├── 0699e0633ad1aac0b8cb48aa434a9ab9263a03
└── 67d2a3b4929484caa1482fea5d0eb1e5be8003

The name of the first of the files (3b0699...) matches our head for mediumfeature. This file stores the contents of the commit, i.e. the actual data as well as some info like the actual human-readable names of files, etc.

++++++++++++++++++++++++++++++++++++++++++++

EXAMPLE: GOING BACK TO SNAPSHOTS OF ANY COMMIT
------------------------------------------

1. Suppose we'd like to go back to an individual commit made some time ago and see exactly how things looked like at the time of that commit. We just need to check out that commit (two commits apart from the current branch's head):

$ git checkout c0ca15e
Note: checking out 'c0ca15e'.

You are in 'detached HEAD' state. You can look around, make experimental
changes and commit them, and you can discard any commits you make in this
state without impacting any branches by performing another checkout.

If you want to create a new branch to retain commits you create, you may
do so (now or later) by using -b with the checkout command again. Example:

  git checkout -b <new-branch-name>

HEAD is now at c0ca15e... Medium feature

* * * * *

The 'detached HEAD' state means that we checked out something that is not the branch's latest state because it's a commit done previously. However, as the output suggests, we can view all the files, even perform commits and then forget about them if we check out some other commit. Or, we can create a branch out of the checked out code and the commits we make.

This allows us to get to arbitrarily old commits at any point in time and create branches out of them.

This is possible because a branch name is just really a human-readable filename in the .git/refs/heads, and the branch's head is the hash that is stored in the corresponding branch head file.

After we do the checkout, we can peek at the branch's head file and see that it retains the true head for the branch, so the checkout is seen as temporary until we create a new branch out of it.

cat .git/refs/heads/mediumfeature 
0c4e74b97fc2e81758d85cb151d17f014bf53490   <---- THE TRUE HEAD REMAINS THE SAME DESPITE THE CHECKOUT OF c0ca15e (HEAD^^)


++++++++++++++++++++++++++++++++++++++++++++

EXAMPLE: DISPLAYING THE DAG (Directed Acyclic Graph) OF A GIT REPO.

git log --graph --all

You can also use gitx or github's web interface. And a multitude of other tools.

++++++++++++++++++++++++++++++++++++++++++++


Whenever you do a pull, if there is a new branch at a remote that isn't KNOWN locally yet, the
output will inform you that you now have new branch:

git pull
remote: Counting objects: 16, done.
remote: Compressing objects: 100% (12/12), done.
remote: Total 16 (delta 3), reused 15 (delta 2), pack-reused 0
Unpacking objects: 100% (16/16), done.
From https://github.com/rosrez/gittest
   abb90e9..fd3f9cf  master     -> origin/master
 *       newidea    -> origin/newidea    <---- INFO ABOUT A NEW BRANCH
Updating abb90e9..fd3f9cf

NOTE: The above output indicates that THERE IS A BRANCH in the remote repo, but it doesn't download it (=doesn't check it out). To prove this, we can issue the 'git branch ' command:

$ git branch
* master

No local copy of 'newidea'. We can see more with 'git branch -a':

$ git branch -a
* master
  remotes/origin/HEAD -> origin/master
  remotes/origin/master
  remotes/origin/newidea

This tells us that there is a 'newidea' branch at the remote (repo). But apart from that, our repo has no affiliation with that branch yet.

We have to do 'git checkout' to actually create a local shadow copy of the new branch and to have it track changes to the remote branch:

git checkout newidea
Branch newidea set up to track remote branch newidea from origin.
Switched to a new branch 'newidea'

NOTE. The sentence that git produces means: the local repo has created a local branch out of a remote branch with the same name and IS NOW TRACKING CHANGES TO IT. We also have switched to it, so commits will be going to this very branch until we do another checkout.

NOTE. The tracking is established by default ONLY IF THERE IS NO LOCAL REPOSITORY WITH THE SAME NAME YET.

NOTE. After 'git checkout' the tracking is established, so git push/pulls will know which remote branch to push to/pull from. However, the creator of the branch does not have the association set up by default, so git push might not succeed. We can set it up by issuing the 'git branch --set-upstream' command:

git branch --set-upstream origin newidea


-----------------------

NOTE.

git branch --set-upstream origin newidea
The --set-upstream flag is deprecated and will be removed. Consider using --track or --set-upstream-to
Branch origin set up to track local branch newidea.

------------------------

NOTE. set default push behavior along these lines:

git push

warning: push.default is unset; its implicit value has changed in
Git 2.0 from 'matching' to 'simple'. To squelch this message
and maintain the traditional behavior, use:

  git config --global push.default matching

To squelch this message and adopt the new behavior now, use:

  git config --global push.default simple

When push.default is set to 'matching', git will push local branches
to the remote branches that already exist with the same name.

Since Git 2.0, Git defaults to the more conservative 'simple'
behavior, which only pushes the current branch to the corresponding
remote branch that 'git pull' uses to update the current branch.

See 'git help config' and search for 'push.default' for further information.
(the 'simple' mode was introduced in Git 1.7.11. Use the similar mode
'current' instead of 'simple' if you sometimes use older versions of Git)

fatal: The current branch newidea has no upstream branch.
To push the current branch and set the remote as upstream, use

    git push --set-upstream origin newidea


