BASICS OF BRANCHING
===================

git branch name
---------------

Creates a branch named name. To switch to the new branch, we use the checkout command:

git checkout name
-----------------

We can also combine the two commands into one

git checkout -b name
--------------------

To see which branch is currently active (checked out), use the 'branch' command without arguments:

git branch
----------

To see which branches are available at a remote (repo), use the 'branch -a' command:

git branch -a
-------------

The output may look like this:

$ git branch -a
* master
  remotes/origin/HEAD -> origin/master
  remotes/origin/master
  remotes/origin/newidea

SENDING BRANCHES OVER THE NETWORK: PUSHING AND PULLING
======================================================

In order to send the commits in a branch to a remote repository, we need to invoke a git-push command with a reference to the remote repository. 

git push
--------

We can do it like this:

git push https://rosrez@github.com/rosrez/gittest.git newidea

Git maintains a list of remote repositories, which we can view with this command

git remote -v
-------------

$ git remote -v
origin  https://rosrez@github.com/rosrez/gittest.git (fetch)
origin  https://rosrez@github.com/rosrez/gittest.git (push)

This list is essentially a list of bookmarks. On the left side in this example, we see the remote named 'origin', it's corresponding address is https://.... So whenever we reference origin in our network-related commands (push/pull, etc.) we just substitute the long address with the 'origin' bookmark. Origin is the default bookmark, but it's by no means special. We can add multiple repositories or even multiple bookmarks that refer to the same repo.

++++++++++++++++++++++++++++++++++++++++++++

EXAMPLE: BRANCH CREATION + SYNCHRONIZING WITH A REMOTE REPO
===========================================================

1. Create branch

$ git branch smallfeature                         <----- CREATE THE 'smallfeature' BATCH (just creates a placeholder)

On branch master
Your branch is up-to-date with 'origin/master'.
nothing to commit, working directory clean

$ git branch                                      <----- LIST BRANCHES: OUR BRANCH IS LISTED, BUT IS NOT CURRENT
* master
  smallfeature

$ git checkout smallfeature                       <------ ONLY NOW DO WE SWITCH TO THE NEW BRANCH
Switched to branch 'smallfeature'
  
$ git status                                      <------ THE STATUS COMMAND NOW OUTPUTS OUR NEW BRANCH AS CURRENT
On branch smallfeature
nothing to commit, working directory clean

$ git branch                                      <------ THE LIST OF BRANCHES NOW MARKS OUR NEW BRANCH AS CURRENT
  master
* smallfeature

2. An alternative workflow.

git checkout -b smallfeature                      <------ COMBINES git branch AND git checkout.


++++++++++++++++++++++++++++++++++++++++++++

Whenever you do a pull, if there is a new branch at a remote that isn't KNOWN locally yet, the
output will inform you that you now have new branch:

git pull
remote: Counting objects: 16, done.
remote: Compressing objects: 100% (12/12), done.
remote: Total 16 (delta 3), reused 15 (delta 2), pack-reused 0
Unpacking objects: 100% (16/16), done.
From https://github.com/rosrez/gittest
   abb90e9..fd3f9cf  master     -> origin/master
 *       newidea    -> origin/newidea    <---- INFO ABOUT A NEW BRANCH
Updating abb90e9..fd3f9cf

NOTE: The above output indicates that THERE IS A BRANCH in the remote repo, but it doesn't download it (=doesn't check it out). To prove this, we can issue the 'git branch ' command:

$ git branch
* master

No local copy of 'newidea'. We can see more with 'git branch -a':

$ git branch -a
* master
  remotes/origin/HEAD -> origin/master
  remotes/origin/master
  remotes/origin/newidea

This tells us that there is a 'newidea' branch at the remote (repo). But apart from that, our repo has no affiliation with that branch yet.

We have to do 'git checkout' to actually create a local shadow copy of the new branch and to have it track changes to the remote branch:

git checkout newidea
Branch newidea set up to track remote branch newidea from origin.
Switched to a new branch 'newidea'

NOTE. The sentence that git produces means: the local repo has created a local branch out of a remote branch with the same name and IS NOW TRACKING CHANGES TO IT. We also have switched to it, so commits will be going to this very branch until we do another checkout.

NOTE. The tracking is established by default ONLY IF THERE IS NO LOCAL REPOSITORY WITH THE SAME NAME YET.

NOTE. After 'git checkout' the tracking is established, so git push/pulls will know which remote branch to push to/pull from. However, the creator of the branch does not have the association set up by default, so git push might not succeed. We can set it up by issuing the 'git branch --set-upstream' command:

git branch --set-upstream origin newidea


-----------------------

NOTE.

git branch --set-upstream origin newidea
The --set-upstream flag is deprecated and will be removed. Consider using --track or --set-upstream-to
Branch origin set up to track local branch newidea.

------------------------

NOTE. set default push behavior along these lines:

git push

warning: push.default is unset; its implicit value has changed in
Git 2.0 from 'matching' to 'simple'. To squelch this message
and maintain the traditional behavior, use:

  git config --global push.default matching

To squelch this message and adopt the new behavior now, use:

  git config --global push.default simple

When push.default is set to 'matching', git will push local branches
to the remote branches that already exist with the same name.

Since Git 2.0, Git defaults to the more conservative 'simple'
behavior, which only pushes the current branch to the corresponding
remote branch that 'git pull' uses to update the current branch.

See 'git help config' and search for 'push.default' for further information.
(the 'simple' mode was introduced in Git 1.7.11. Use the similar mode
'current' instead of 'simple' if you sometimes use older versions of Git)

fatal: The current branch newidea has no upstream branch.
To push the current branch and set the remote as upstream, use

    git push --set-upstream origin newidea


