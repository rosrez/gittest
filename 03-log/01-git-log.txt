@@
1. BASIC GIT-LOG

git-log lists all commits in the current branch, newest commit first.

$ git log
commit c7ffaf6a4e3b17743173e07911c6fa1a1686375a  <---------- NEWEST COMMIT
Author: Oleg Rosowiecki <rosrez@o2.pl>
Date:   Sun Nov 22 22:54:21 2015 +0100

    Global settings

commit abb90e9088692e0594fa714f4e5be1b8e4a25276  <----------- EARLIER COMMIT
Author: rosrez <rosrez@o2.pl>
Date:   Sun Nov 22 22:21:45 2015 +0100

    Initial commit

@@
2. GIT-LOG [rev]

When "rev" is not specified, the command defaults to:

$ git log HEAD

which displays all of the branch's commits in reverse chronological order, starting from the tip of 
the current branch (HEAD).

When "rev" is not HEAD, git-log will display the commit specified by the "rev" argument, and the chain of parent
commits that lead to it. We can specify a commit by:

1) its hash:

$ git log c7ffa

2) a ref, like a branch or tag:

$ git log hotfix    # the tip of the "hotfix" branch

3) a relative ref:

$ git log HEAD^2

@@
3. RANGES OF HASHES (DOUBLE-DOT OR TRIPLE-DOT)

We can get list of commits for a range of hashes; the range is specified in the double-dot or triple-dot notation.
See texts in this section about the two notations.

git log --pretty=oneline
------------------------
Lists all commits, with only one line per commit, like this:

git log --pretty=oneline
41aae77dfe9668bc859d046f830faec0222f686d Added remotes
91d29ecde9dc4d1d0153de24885a526e29933898 Additional notes on setting up tracking for remote branches locally
3b67d2a3b4929484caa1482fea5d0eb1e5be8003 Added branching
fd3f9cff94719ffbc5d63d2e50364b094db6c7ea Added basic workflow               <---- C2
3123534c8a8ee67adebc02e01b93455f215fbffd added log and show descriptions    <---- C1
c7ffaf6a4e3b17743173e07911c6fa1a1686375a Global settings
abb90e9088692e0594fa714f4e5be1b8e4a25276 Initial commit


