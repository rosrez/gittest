@@
1. DOUBLE DOT NOTATION - CREATE TWO DIVERGING BRANCHES

1) Let us create new branch and make some changes in it:

$ git checkout -b compare2
Switched to a new branch 'compare2'

$ echo "feature2.extra3 = extra stuff #2.3" >> test/feature2.txt

$ git commit -am 'added feature2.extra3'
[compare2 1f0ab8f] added feature2.extra3
 1 file changed, 1 insertion(+)

2) Show recent history of "compare2" branch: 

$ git log --pretty=oneline -3
1f0ab8f092713ef61e9d79a67118f3ba32cc2d7a added feature2.extra3  <--- CHANGE MADE IN "compare2"
ab6b31a284efb64355a0f7d8c2b1fe71c852c2cd Merge branch 'compare' <--- THE POINT WHEN "compare2" FORKED OFF "master"
aeac2085dda0d25cc7376b06527088d0ccabbab9 mainline change 2


3) Then switch back to "master" and make two changes as two distinct commits:

$ git checkout master
Switched to branch 'master'

$ echo "MAINLINE CHANGE 3" >> test/mainline.txt 

$ git commit -am 'mainline change 3'
[master 03efd47] mainline change 3
 1 file changed, 1 insertion(+)

$ echo "MAINLINE CHANGE 4" >> test/mainline.txt

$ git commit -am 'mainline change 4'
[master cebc7a3] mainline change 4
 1 file changed, 1 insertion(+)

4) Show recent history of "master":

$ git log --pretty=oneline -3
cebc7a3f920d348b9c4360d685cbeb7eb384eb3b mainline change 4      <--- 2nd CHANGE IN "master"
03efd4717274d75ea253e2dcef9f369b92a34454 mainline change 3      <--- 1st CHANGE IN "master"
ab6b31a284efb64355a0f7d8c2b1fe71c852c2cd Merge branch 'compare' <--- THE POINT WHEN "compare2" WAS CREATED

@@
2. DOUBLE-DOT NOTATION - SEE CHANGES IN COMMIT #2 THAT ARE NOT IN COMMIT #1.

When given two commit names, git-log shows anything that is reachable from the SECOND commit, EXCLUDING everything that is reachable from the FIRST.

1) Make sure we're on branch "master"

$ git checkout master

2) $ git log --pretty=oneline master..compare2
1f0ab8f092713ef61e9d79a67118f3ba32cc2d7a added feature2.extra3

As we can see, here git-log only outputs the commit that is in "compare2" but not in "master".

3) We can also reverse the order of commits to see what has changed in "master" since the branches diverged:

$ git log --pretty=oneline compare2..master
cebc7a3f920d348b9c4360d685cbeb7eb384eb3b mainline change 4
03efd4717274d75ea253e2dcef9f369b92a34454 mainline change 3

Now we see the two commits made in "master" since the common ancestor commit with "compare2".

@@
3. TRIPLE-DOT - SHOW ALL COMMITS SINCE COMMON ANCESTOR

With the triple dot notation, we can combine "commit2-commit1" and "commit1-commit2" differences in a single output:

$ git log --pretty=oneline master...compare2
cebc7a3f920d348b9c4360d685cbeb7eb384eb3b mainline change 4
03efd4717274d75ea253e2dcef9f369b92a34454 mainline change 3
1f0ab8f092713ef61e9d79a67118f3ba32cc2d7a added feature2.extra3

The order of the arguments to triple dot becomes irrelevant, so swapping the commits produces the same output:

$ git log --pretty=oneline compare2...master
cebc7a3f920d348b9c4360d685cbeb7eb384eb3b mainline change 4
03efd4717274d75ea253e2dcef9f369b92a34454 mainline change 3
1f0ab8f092713ef61e9d79a67118f3ba32cc2d7a added feature2.extra3

@@
4. ALL THE RELEVANT OPTIONS TO GIT-LOG ARE SUPPORTED, like -p, etc.

@@
5. GIT-DIFF ALSO SUPPORTS TRIPLE DOT

It is possible to supply triple dot to git-diff. The output is pretty much reverse to git-log:

1) Triple dot - compare2...master:

$ git diff compare2...master
diff --git a/test/mainline.txt b/test/mainline.txt
index 1362a1f..43f74f5 100644
--- a/test/mainline.txt
+++ b/test/mainline.txt
@@ -2,3 +2,5 @@ MAINLINE CHANGE
 diff change 1
 diff change 2
 MAINLINE CHANGE 2
+MAINLINE CHANGE 3
+MAINLINE CHANGE 4

Only shows changes in "master" that are not in "compare2".

2) Reverse the order of commit arguments:

$ git diff master...compare2
diff --git a/test/feature2.txt b/test/feature2.txt
index b5a9226..a148abd 100644
--- a/test/feature2.txt
+++ b/test/feature2.txt
@@ -1,3 +1,4 @@
 feature2 = 02
 feature2.extra1 = extra stuff #2.1
 feature2.extra2 = extra stuff #2.2
+feature2.extra3 = extra stuff #2.3

This only shows 

3) Double dot:

$ git diff compare2..master
diff --git a/test/feature2.txt b/test/feature2.txt
index a148abd..b5a9226 100644
--- a/test/feature2.txt
+++ b/test/feature2.txt
@@ -1,4 +1,3 @@
 feature2 = 02
 feature2.extra1 = extra stuff #2.1
 feature2.extra2 = extra stuff #2.2
-feature2.extra3 = extra stuff #2.3
diff --git a/test/mainline.txt b/test/mainline.txt
index 1362a1f..43f74f5 100644
--- a/test/mainline.txt
+++ b/test/mainline.txt
@@ -2,3 +2,5 @@ MAINLINE CHANGE
 diff change 1
 diff change 2
 MAINLINE CHANGE 2
+MAINLINE CHANGE 3
+MAINLINE CHANGE 4

Shows all the changes ("master" vs. "compare2")

@@
6. GITK ALSO SUPPORTS DOUBLE AND TRIPLE DOT NOTATION.

Gitk can be useful to get a synopsis of changes made in one branch that are not in the other (double dot) or just see differences between two branches. Gitk will display the graph of diverging commits as well as diffs.
