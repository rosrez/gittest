@@
1. GIT-STASH

Save change in the current index and working directory for later.

# Create a new file
$ vim 03-log/11-git-shortlog.txt

# Show status to see new/changed files
$ git status

On branch master
Your branch is up-to-date with 'origin/master'.
Untracked files:
  (use "git add <file>..." to include in what will be committed)

    03-log/11-git-shortlog.txt

nothing added to commit but untracked files present (use "git add" to track)

# Save changes (including untracked files)
$ git stash -u
Saved working directory and index state WIP on master: 0f1b087 factored out advanced options from basic filtering
HEAD is now at 0f1b087 factored out advanced options from basic filtering

# We're back to the clean working directory state
$ git status
On branch master
Your branch is up-to-date with 'origin/master'.
nothing to commit, working directory clean

@@
2. GIT STASH LIST: VIEW STASHES CURRENTLY ON THE STACK

$ git stash list
stash@{0}: WIP on master: 0f1b087 factored out advanced options from basic filtering

@@
3. STASHES ARE PUT ON A STACK

Let's commit another change:

$ echo "# Important comment" >> test/version.txt  
$ git commit -am "Added important comment to version file"
[master 277a80e] Added important comment to version file
 1 file changed, 1 insertion(+)

Then make another change:

$ git status
On branch master
Your branch is ahead of 'origin/master' by 1 commit.
  (use "git push" to publish your local commits)
Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git checkout -- <file>..." to discard changes in working directory)

        modified:   test/version.txt

no changes added to commit (use "git add" and/or "git commit -a")

# Stash the current state
$ git stash
Saved working directory and index state WIP on master: 277a80e Added important comment to version file
HEAD is now at 277a80e Added important comment to version file
 
# See the stash list: 
$ git stash list
stash@{0}: WIP on master: 277a80e Added important comment to version file             <--- MOST RECENT STASH
stash@{1}: WIP on master: 0f1b087 factored out advanced options from basic filtering  <--- PREVIOUS STASH

# Verify that we have a clean working directory
$ git status
On branch master
Your branch is ahead of 'origin/master' by 1 commit.
  (use "git push" to publish your local commits)
nothing to commit, working directory clean

@@
4. ACCESSING INDIVIDUAL STASHES

We can refer to individual stashes as stash@{n}, much like we refer to reflog items:

# Check changes in the earlier stash
$ git diff stash@{1}
diff --git a/test/version.txt b/test/version.txt
index 5a2a93c..a79896c 100644
--- a/test/version.txt
+++ b/test/version.txt
@@ -1,3 +1,4 @@
 Version 4
 version 4.1
 Version 4.2
+# Important comment

# Check changes in the latest stash
$ git diff stash@{0}
diff --git a/test/version.txt b/test/version.txt
index fea1c10..a79896c 100644
--- a/test/version.txt
+++ b/test/version.txt
@@ -2,4 +2,3 @@ Version 4
 version 4.1
 Version 4.2
 # Important comment
-# Another important comment

@@
5. APPLYING STASHES

git-stash apply will apply changes in the most recent (i.e. topmost, index 0) stash to the working directory:

$ git stash apply
On branch master
Your branch is ahead of 'origin/master' by 1 commit.
  (use "git push" to publish your local commits)
Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git checkout -- <file>..." to discard changes in working directory)

        modified:   test/version.txt

no changes added to commit (use "git add" and/or "git commit -a")

$ git diff
diff --git a/test/version.txt b/test/version.txt
index a79896c..fea1c10 100644
--- a/test/version.txt
+++ b/test/version.txt
@@ -2,3 +2,4 @@ Version 4
 version 4.1
 Version 4.2
 # Important comment
+# Another important comment

You can also apply stashes in any order; just refer to them as stash@{n}.

@@
6. APPLYING A STASH DOES NOT AUTOMATICALLY REMOVE IT FROM THE LIST!

After we've applied the stash as shown in the preceding section, we still see that there are two of them
on the list:

$ git stash list
stash@{0}: WIP on master: 277a80e Added important comment to version file
stash@{1}: WIP on master: 0f1b087 factored out advanced options from basic filtering

What we need is to drop the stash we've already applied.

@@
7. DROPPING STASHES

When we're done with our stash, it's time to remove it.

# Drop stash #0
$ git stash drop stash@{0}
Dropped stash@{0} (5ac41cd1e321c142beca7839cffb42f527c8a983)
# View stash list
$ git stash list
stash@{0}: WIP on master: 0f1b087 factored out advanced options from basic filtering

Note that 'git stash drop' without an argument would default to dropping the topmost stash (stash@{0}).
